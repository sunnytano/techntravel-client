{"ast":null,"code":"var _jsxFileName = \"/Users/stan-0/Desktop/personal projects/traveler/frontend/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { createStore, applyMiddleware, compose, combineReducers } from 'redux';\nimport * as serviceWorker from './serviceWorker';\nimport NewsReducer from './reducers/NewsReducer.js';\nimport UserReducer from './reducers/UserReducer.js';\nimport { Provider } from 'react-redux'; // Provider is a component, it provides to the entire application access to the store'\n\nimport thunk from 'redux-thunk';\nimport RootReducer from './reducers/RootReducer'; // import News from './components/News';\n// store is used to manage state\n// contains state as an object and functions that manipulate/read state\n\nlet rootReducer = combineReducers({\n  news: NewsReducer,\n  users: UserReducer\n});\nconst store = createStore(user, UserReducer, applyMiddleware(thunk));\nconsole.log(\"reading state before dispatch\", store.getState()); // dispatch is the functions used to write to the state, \n// dipatch takes objects as arguments called \"action\"\n// the action must have at least a property called \"type\"\n// calling dispatch tells redux to call your reducer, this will initate your reducer\n// the type here is exactly the same as what is passed in action which is the second argument in the reducer function\n// const newsCategory = {name: \"Tech\"}\n// store.dispatch({type: \"CHANGE_LOADING\"}) \n// store.dispatch({type: \"ADD_CATEGORY\", payload: newsCategory})\n// store.dispatch({type: \"CHANGE_FILTER\", payload: \"hello\" })\n// console.log(\"reading state after dispatch\", store.getState())\n// payload can be any data type; object, array, string, etc\n// when you hook up react with redux and  make a fetch; calling dispatch and then passing in (fetch)data as a payload and using that to write to state in reducer\n// everytime you call dispatch, the reducer is called\n// type is used to determine what to do in reducer\n// payload is used to determine what new data needs to be used to change state\n// data is always action.payload => payloads are like sources of information\n// Provider is a component, it provides to the entire application access to the store\n\nReactDOM.render(React.createElement(Provider, {\n  store: store,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 43\n  },\n  __self: this\n}, React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 44\n  },\n  __self: this\n})), document.getElementById('root')); // If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();","map":{"version":3,"sources":["/Users/stan-0/Desktop/personal projects/traveler/frontend/src/index.js"],"names":["React","ReactDOM","App","createStore","applyMiddleware","compose","combineReducers","serviceWorker","NewsReducer","UserReducer","Provider","thunk","RootReducer","rootReducer","news","users","store","user","console","log","getState","render","document","getElementById","unregister"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,SAASC,WAAT,EAAsBC,eAAtB,EAAuCC,OAAvC,EAAgDC,eAAhD,QAAuE,OAAvE;AACA,OAAO,KAAKC,aAAZ,MAA+B,iBAA/B;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,SAASC,QAAT,QAAyB,aAAzB,C,CAAuC;;AACvC,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,WAAP,MAAwB,wBAAxB,C,CACA;AAGA;AACA;;AACA,IAAIC,WAAW,GAAIP,eAAe,CAAC;AAACQ,EAAAA,IAAI,EAAEN,WAAP;AAC/BO,EAAAA,KAAK,EAAEN;AADwB,CAAD,CAAlC;AAEA,MAAMO,KAAK,GAAGb,WAAW,CAACc,IAAD,EAAOR,WAAP,EAAoBL,eAAe,CAACO,KAAD,CAAnC,CAAzB;AAEAO,OAAO,CAACC,GAAR,CAAY,+BAAZ,EAA6CH,KAAK,CAACI,QAAN,EAA7C,E,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACAnB,QAAQ,CAACoB,MAAT,CACI,oBAAC,QAAD;AAAU,EAAA,KAAK,EAAEL,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADJ,CADJ,EAIIM,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAJJ,E,CAMA;AACA;AACA;;AACAhB,aAAa,CAACiB,UAAd","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { createStore, applyMiddleware, compose, combineReducers } from 'redux'\nimport * as serviceWorker from './serviceWorker';\nimport NewsReducer from './reducers/NewsReducer.js'\nimport UserReducer from './reducers/UserReducer.js'\nimport { Provider } from 'react-redux' // Provider is a component, it provides to the entire application access to the store'\nimport thunk from 'redux-thunk';\nimport RootReducer from './reducers/RootReducer'\n// import News from './components/News';\n\n\n// store is used to manage state\n// contains state as an object and functions that manipulate/read state\nlet rootReducer =  combineReducers({news: NewsReducer,\n    users: UserReducer})\nconst store = createStore(user, UserReducer, applyMiddleware(thunk))\n\nconsole.log(\"reading state before dispatch\", store.getState())\n\n// dispatch is the functions used to write to the state, \n// dipatch takes objects as arguments called \"action\"\n// the action must have at least a property called \"type\"\n// calling dispatch tells redux to call your reducer, this will initate your reducer\n// the type here is exactly the same as what is passed in action which is the second argument in the reducer function\n// const newsCategory = {name: \"Tech\"}\n// store.dispatch({type: \"CHANGE_LOADING\"}) \n// store.dispatch({type: \"ADD_CATEGORY\", payload: newsCategory})\n// store.dispatch({type: \"CHANGE_FILTER\", payload: \"hello\" })\n// console.log(\"reading state after dispatch\", store.getState())\n\n// payload can be any data type; object, array, string, etc\n// when you hook up react with redux and  make a fetch; calling dispatch and then passing in (fetch)data as a payload and using that to write to state in reducer\n// everytime you call dispatch, the reducer is called\n// type is used to determine what to do in reducer\n// payload is used to determine what new data needs to be used to change state\n// data is always action.payload => payloads are like sources of information\n\n// Provider is a component, it provides to the entire application access to the store\nReactDOM.render(\n    <Provider store={store}> \n        <App />\n    </Provider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"]},"metadata":{},"sourceType":"module"}