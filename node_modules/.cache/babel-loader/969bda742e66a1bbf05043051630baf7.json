{"ast":null,"code":"var _jsxFileName = \"/Users/stan-0/Desktop/personal projects/traveler/src/App.js\";\nimport React from 'react';\nimport './App.css';\nimport { connect } from 'react-redux'; // higher order component that will add functionality to ur component\n\nimport NewsContainer from './NewsContainer';\nimport { fetchNews } from './actions/NewsAction.js';\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loading: true // handleAddFavorite = () => {\n      //   this.setState({\n      //     favorites: [...this.props.favorites]\n      //   })\n      // }\n\n    };\n  }\n\n  componentDidMount() {\n    this.props.fetchNews();\n  }\n\n  render() {\n    console.log(this.props.news); // console.log(\"APP PROPS\", this.props)\n\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, React.createElement(NewsContainer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }));\n  }\n\n} // MSP IS READING TO STATE\n// MSP is how you will read from state; this will give you access to the entire redux state\n// and whatever you return in the MSP function will be added that components props\n// state will be the defaultState in reducer\n// this is how a component will gain access to data that is stored within the redux store\n// MSP must return an object\n// this obj will be appended to the props of the component\n\n\nfunction mapStateToProps(state) {\n  console.log(state);\n  return {\n    news: state.news // only return the state that you need for this paticular component that will be read as props\n\n  };\n} // MDP IS WRITING TO STATE\n// has access to dispactch so it can write to state\n// will return an object\n// obj will also be appended to props of the component\n\n\nconst mapDispatchToProps = dispatch => ({\n  fetchNews: () => dispatch(fetchNews())\n}); // connect is a higher order function; which is a function that returns a function\n// connect makes 2 calls; whatever connect returns is another function\n// then that returned function is invoked in turn with App as its argument\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["/Users/stan-0/Desktop/personal projects/traveler/src/App.js"],"names":["React","connect","NewsContainer","fetchNews","App","Component","state","loading","componentDidMount","props","render","console","log","news","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;AACA,SAASC,OAAT,QAAwB,aAAxB,C,CAAsC;;AACtC,OAAOC,aAAP,MAA0B,iBAA1B;AACA,SAASC,SAAT,QAA0B,yBAA1B;;AAEA,MAAMC,GAAN,SAAkBJ,KAAK,CAACK,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAEhCC,KAFgC,GAE1B;AACJC,MAAAA,OAAO,EAAC,IADJ,CAGN;AACA;AACA;AACA;AACA;;AAPM,KAF0B;AAAA;;AAWhCC,EAAAA,iBAAiB,GAAE;AACjB,SAAKC,KAAL,CAAWN,SAAX;AACD;;AAEDO,EAAAA,MAAM,GAAE;AACNC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKH,KAAL,CAAWI,IAAvB,EADM,CAEN;;AACF,WACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF;AAKD;;AAvBiC,C,CA0BlC;AACA;AACA;AACA;AACA;AACE;AACA;;;AAEF,SAASC,eAAT,CAAyBR,KAAzB,EAA+B;AAC7BK,EAAAA,OAAO,CAACC,GAAR,CAAYN,KAAZ;AACA,SAAO;AACLO,IAAAA,IAAI,EAAEP,KAAK,CAACO,IADP,CACY;;AADZ,GAAP;AAGD,C,CAGD;AACA;AACA;AACA;;;AACA,MAAME,kBAAkB,GAAIC,QAAD,KAAe;AACxCb,EAAAA,SAAS,EAAE,MAAMa,QAAQ,CAACb,SAAS,EAAV;AADe,CAAf,CAA3B,C,CAIA;AACA;AACA;;;AACA,eAAeF,OAAO,CAACa,eAAD,EAAkBC,kBAAlB,CAAP,CAA6CX,GAA7C,CAAf","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { connect } from 'react-redux' // higher order component that will add functionality to ur component\nimport NewsContainer from './NewsContainer';\nimport { fetchNews } from './actions/NewsAction.js'\n\nclass App extends React.Component {\n\n  state={\n    loading:true\n  }\n  // handleAddFavorite = () => {\n  //   this.setState({\n  //     favorites: [...this.props.favorites]\n  //   })\n  // }\n\n  componentDidMount(){\n    this.props.fetchNews()\n  }\n\n  render(){\n    console.log(this.props.news)\n    // console.log(\"APP PROPS\", this.props)\n  return (\n    <div className=\"App\">\n      <NewsContainer />\n    </div>\n  );\n}\n}\n\n// MSP IS READING TO STATE\n// MSP is how you will read from state; this will give you access to the entire redux state\n// and whatever you return in the MSP function will be added that components props\n// state will be the defaultState in reducer\n// this is how a component will gain access to data that is stored within the redux store\n  // MSP must return an object\n  // this obj will be appended to the props of the component\n\nfunction mapStateToProps(state){ \n  console.log(state)\n  return { \n    news: state.news // only return the state that you need for this paticular component that will be read as props\n  }\n}\n\n\n// MDP IS WRITING TO STATE\n// has access to dispactch so it can write to state\n// will return an object\n// obj will also be appended to props of the component\nconst mapDispatchToProps = (dispatch) => ({\n  fetchNews: () => dispatch(fetchNews())\n})\n\n// connect is a higher order function; which is a function that returns a function\n// connect makes 2 calls; whatever connect returns is another function\n// then that returned function is invoked in turn with App as its argument\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n"]},"metadata":{},"sourceType":"module"}