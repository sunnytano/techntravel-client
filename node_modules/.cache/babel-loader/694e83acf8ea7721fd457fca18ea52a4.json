{"ast":null,"code":"import _objectSpread from \"/Users/stan-0/Desktop/personal projects/traveler/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/stan-0/Desktop/personal projects/traveler/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { createStore } from 'redux';\nimport * as serviceWorker from './serviceWorker';\nconst defaultState = {\n  news: [],\n  filter: \"\",\n  loading: true,\n  currentUser: null // reducer: is used to control changes to state\n  // whatever is returned from the reducer becomes state\n  // type is used to determine what to do in reducer\n  // payload is used to determine what new data needs to be used to change state\n\n};\n\nfunction reducer(state = defaultState, action) {\n  console.log(\"STATE in reducer\", state);\n  console.log(\"ACTION in reducer\", action);\n\n  switch (action.type) {\n    //action.type is really just a string and MUST be called type\n    case \"CHANGE_LOADING\":\n      return _objectSpread({}, state, {\n        loading: false // making a copy, using spread operator to preserve old state but only changing what we want to change\n\n      });\n\n    case \"ADD_CATEGORY\":\n      return _objectSpread({}, state, {\n        news: [...state.news, action.payload] //using spread operator here bc adding to the array\n\n      });\n\n    case \"CHANGE_FILTER\":\n      return _objectSpread({}, state, {\n        filter: action.payload // do not need spread operator bc only changing state, not adding to it\n\n      });\n\n    default:\n      return state;\n    //whatever is returned from the reducer becomes state, its like setting state\n  }\n} // store is used to manage state\n// contains state as an object and functions that manipulate/read state\n\n\nconst store = createStore(reducer);\nconsole.log(\"reading state before dispatch\", store.getState()); // dispatch is the functions used to write to the state, \n// dipatch takes objects as arguments called \"action\"\n// the action must have at least a property called \"type\"\n// calling dispatch tells redux to call your reducer, this will initate your reducer\n// the type here is exactly the same as what is passed in action on line 18\n\nconst newsCategory = {\n  name: \"Tech\"\n};\nstore.dispatch({\n  type: \"CHANGE_LOADING\"\n});\nstore.dispatch({\n  type: \"ADD_CATEGORY\",\n  payload: newsCategory\n});\nstore.dispatch({\n  type: \"CHANGE_FILTER\",\n  payload: \"hello\"\n});\nconsole.log(\"reading state after dispatch\", store.getState()); // payload can be any data type; object, array, string, etc\n// when you hook up react with redux and  make a fetch; calling dispatch and then passing in (fetch)data as a payload and using that to write to state in reducer\n// everytime you call dispatch, the reducer is called\n// type is used to determine what to do in reducer\n// payload is used to determine what new data needs to be used to change state\n// data is always action.payload => payloads are like sources of information\n\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 59\n  },\n  __self: this\n}), document.getElementById('root')); // If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();","map":{"version":3,"sources":["/Users/stan-0/Desktop/personal projects/traveler/src/index.js"],"names":["React","ReactDOM","App","createStore","serviceWorker","defaultState","news","filter","loading","currentUser","reducer","state","action","console","log","type","payload","store","getState","newsCategory","name","dispatch","render","document","getElementById","unregister"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,SAASC,WAAT,QAA4B,OAA5B;AACA,OAAO,KAAKC,aAAZ,MAA+B,iBAA/B;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,IAAI,EAAE,EADW;AAEjBC,EAAAA,MAAM,EAAE,EAFS;AAGjBC,EAAAA,OAAO,EAAE,IAHQ;AAIjBC,EAAAA,WAAW,EAAE,IAJI,CAOrB;AACA;AACA;AACA;;AAVqB,CAArB;;AAWA,SAASC,OAAT,CAAiBC,KAAK,GAACN,YAAvB,EAAqCO,MAArC,EAA4C;AACxCC,EAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCH,KAAhC;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCF,MAAjC;;AACA,UAAOA,MAAM,CAACG,IAAd;AAAqB;AACjB,SAAK,gBAAL;AACI,+BAAWJ,KAAX;AAAkBH,QAAAA,OAAO,EAAE,KAA3B,CAAkC;;AAAlC;;AACJ,SAAK,cAAL;AACI,+BAAWG,KAAX;AAAkBL,QAAAA,IAAI,EAAE,CAAC,GAAGK,KAAK,CAACL,IAAV,EAAgBM,MAAM,CAACI,OAAvB,CAAxB,CAAyD;;AAAzD;;AACJ,SAAK,eAAL;AACI,+BAAWL,KAAX;AAAkBJ,QAAAA,MAAM,EAAEK,MAAM,CAACI,OAAjC,CAA0C;;AAA1C;;AACJ;AACI,aAAOL,KAAP;AAAa;AARrB;AAUH,C,CAED;AACA;;;AACA,MAAMM,KAAK,GAAGd,WAAW,CAACO,OAAD,CAAzB;AAEAG,OAAO,CAACC,GAAR,CAAY,+BAAZ,EAA6CG,KAAK,CAACC,QAAN,EAA7C,E,CAEA;AACA;AACA;AACA;AACA;;AACA,MAAMC,YAAY,GAAG;AAACC,EAAAA,IAAI,EAAE;AAAP,CAArB;AACAH,KAAK,CAACI,QAAN,CAAe;AAACN,EAAAA,IAAI,EAAE;AAAP,CAAf;AACAE,KAAK,CAACI,QAAN,CAAe;AAACN,EAAAA,IAAI,EAAE,cAAP;AAAuBC,EAAAA,OAAO,EAAEG;AAAhC,CAAf;AACAF,KAAK,CAACI,QAAN,CAAe;AAACN,EAAAA,IAAI,EAAE,eAAP;AAAwBC,EAAAA,OAAO,EAAE;AAAjC,CAAf;AACAH,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAA4CG,KAAK,CAACC,QAAN,EAA5C,E,CAEA;AACA;AACA;AACA;AACA;AACA;;AAGAjB,QAAQ,CAACqB,MAAT,CAAgB,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAhB,EAAyBC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAzB,E,CAEA;AACA;AACA;;AACApB,aAAa,CAACqB,UAAd","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { createStore } from 'redux'\nimport * as serviceWorker from './serviceWorker';\n\nconst defaultState = {\n    news: [], \n    filter: \"\",\n    loading: true, \n    currentUser: null\n}\n\n// reducer: is used to control changes to state\n// whatever is returned from the reducer becomes state\n// type is used to determine what to do in reducer\n// payload is used to determine what new data needs to be used to change state\nfunction reducer(state=defaultState, action){\n    console.log(\"STATE in reducer\", state)\n    console.log(\"ACTION in reducer\", action)\n    switch(action.type){ //action.type is really just a string and MUST be called type\n        case \"CHANGE_LOADING\":\n            return {...state, loading: false} // making a copy, using spread operator to preserve old state but only changing what we want to change\n        case \"ADD_CATEGORY\":\n            return {...state, news: [...state.news, action.payload]} //using spread operator here bc adding to the array\n        case \"CHANGE_FILTER\":\n            return {...state, filter: action.payload} // do not need spread operator bc only changing state, not adding to it\n        default:\n            return state //whatever is returned from the reducer becomes state, its like setting state\n    }\n}\n\n// store is used to manage state\n// contains state as an object and functions that manipulate/read state\nconst store = createStore(reducer)\n\nconsole.log(\"reading state before dispatch\", store.getState())\n\n// dispatch is the functions used to write to the state, \n// dipatch takes objects as arguments called \"action\"\n// the action must have at least a property called \"type\"\n// calling dispatch tells redux to call your reducer, this will initate your reducer\n// the type here is exactly the same as what is passed in action on line 18\nconst newsCategory = {name: \"Tech\"}\nstore.dispatch({type: \"CHANGE_LOADING\"}) \nstore.dispatch({type: \"ADD_CATEGORY\", payload: newsCategory})\nstore.dispatch({type: \"CHANGE_FILTER\", payload: \"hello\" })\nconsole.log(\"reading state after dispatch\", store.getState())\n\n// payload can be any data type; object, array, string, etc\n// when you hook up react with redux and  make a fetch; calling dispatch and then passing in (fetch)data as a payload and using that to write to state in reducer\n// everytime you call dispatch, the reducer is called\n// type is used to determine what to do in reducer\n// payload is used to determine what new data needs to be used to change state\n// data is always action.payload => payloads are like sources of information\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"]},"metadata":{},"sourceType":"module"}