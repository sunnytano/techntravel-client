{"ast":null,"code":"import _objectSpread from \"/Users/stan-0/Desktop/personal projects/traveler/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/stan-0/Desktop/personal projects/traveler/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { createStore } from 'redux';\nimport * as serviceWorker from './serviceWorker'; // store is used to manage state\n// contains state as an object and functions that manipulate/read state\n// reducer: is used to control changes to state\n// whatever is returned from the reducer becomes state\n\nconst defaultState = {\n  news: [],\n  filter: \"\",\n  loading: true\n};\n\nfunction reducer(state = defaultState, action) {\n  console.log(\"STATE in reducer\", state);\n  console.log(\"ACTION in reducer\", action);\n\n  switch (action.type) {\n    case \"HELLO_POTATO\":\n      return _objectSpread({}, state, {\n        loading: false //\n\n      });\n\n    default:\n      return state;\n    //whatever is returned from the reducer becomes state, its like setting state\n  }\n}\n\nconst store = createStore(reducer); // dispatch is the functions used to write to the state, \n// dipatch takes objects as arguments called \"action\"\n// the action must have at least a property called \"type\"\n// calling dispatch tells redux to call your reducer, this will initate your reducer\n\nconsole.log(\"reading state before dispatch\", store.getState()); // the type here is exactly the same as what is passed in action on line 18\n\nstore.dispatch({\n  type: \"HELLO_POTATO\"\n});\nconsole.log(\"reading state after dispatch\", store.getState());\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 46\n  },\n  __self: this\n}), document.getElementById('root')); // If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();","map":{"version":3,"sources":["/Users/stan-0/Desktop/personal projects/traveler/src/index.js"],"names":["React","ReactDOM","App","createStore","serviceWorker","defaultState","news","filter","loading","reducer","state","action","console","log","type","store","getState","dispatch","render","document","getElementById","unregister"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,SAASC,WAAT,QAA4B,OAA5B;AACA,OAAO,KAAKC,aAAZ,MAA+B,iBAA/B,C,CAEA;AACA;AAEA;AACA;;AACA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,IAAI,EAAE,EADW;AAEjBC,EAAAA,MAAM,EAAE,EAFS;AAGjBC,EAAAA,OAAO,EAAE;AAHQ,CAArB;;AAMA,SAASC,OAAT,CAAiBC,KAAK,GAACL,YAAvB,EAAqCM,MAArC,EAA4C;AACxCC,EAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCH,KAAhC;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCF,MAAjC;;AAEA,UAAOA,MAAM,CAACG,IAAd;AACQ,SAAK,cAAL;AACI,+BAAWJ,KAAX;AAAkBF,QAAAA,OAAO,EAAE,KAA3B,CAAkC;;AAAlC;;AACJ;AACI,aAAOE,KAAP;AAAa;AAJzB;AAMH;;AAED,MAAMK,KAAK,GAAGZ,WAAW,CAACM,OAAD,CAAzB,C,CAEA;AACA;AACA;AACA;;AACAG,OAAO,CAACC,GAAR,CAAY,+BAAZ,EAA6CE,KAAK,CAACC,QAAN,EAA7C,E,CAGA;;AACAD,KAAK,CAACE,QAAN,CAAe;AAACH,EAAAA,IAAI,EAAE;AAAP,CAAf;AAGAF,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAA4CE,KAAK,CAACC,QAAN,EAA5C;AAEAf,QAAQ,CAACiB,MAAT,CAAgB,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAhB,EAAyBC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAzB,E,CAEA;AACA;AACA;;AACAhB,aAAa,CAACiB,UAAd","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { createStore } from 'redux'\nimport * as serviceWorker from './serviceWorker';\n\n// store is used to manage state\n// contains state as an object and functions that manipulate/read state\n\n// reducer: is used to control changes to state\n// whatever is returned from the reducer becomes state\nconst defaultState = {\n    news: [], \n    filter: \"\",\n    loading: true\n}\n\nfunction reducer(state=defaultState, action){\n    console.log(\"STATE in reducer\", state)\n    console.log(\"ACTION in reducer\", action)\n\n    switch(action.type){\n            case \"HELLO_POTATO\":\n                return {...state, loading: false} //\n            default:\n                return state //whatever is returned from the reducer becomes state, its like setting state\n    }\n}\n\nconst store = createStore(reducer)\n\n// dispatch is the functions used to write to the state, \n// dipatch takes objects as arguments called \"action\"\n// the action must have at least a property called \"type\"\n// calling dispatch tells redux to call your reducer, this will initate your reducer\nconsole.log(\"reading state before dispatch\", store.getState())\n\n\n// the type here is exactly the same as what is passed in action on line 18\nstore.dispatch({type: \"HELLO_POTATO\"}) \n\n\nconsole.log(\"reading state after dispatch\", store.getState())\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"]},"metadata":{},"sourceType":"module"}