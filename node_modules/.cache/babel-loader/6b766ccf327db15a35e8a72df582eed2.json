{"ast":null,"code":"var _jsxFileName = \"/Users/stan-0/Desktop/personal projects/traveler/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { createStore } from 'redux';\nimport * as serviceWorker from './serviceWorker'; // store is used to manage state\n// contains state as an object and functions that manipulate/read state\n\nconst store = createStore(reducer);\nconsole.log(\"reading state before dispatch\", store.getState()); // dispatch is the functions used to write to the state, \n// dipatch takes objects as arguments called \"action\"\n// the action must have at least a property called \"type\"\n// calling dispatch tells redux to call your reducer, this will initate your reducer\n// the type here is exactly the same as what is passed in action on line 18\n\nconst newsCategory = {\n  name: \"Tech\"\n};\nstore.dispatch({\n  type: \"CHANGE_LOADING\"\n});\nstore.dispatch({\n  type: \"ADD_CATEGORY\",\n  payload: newsCategory\n});\nstore.dispatch({\n  type: \"CHANGE_FILTER\",\n  payload: \"hello\"\n});\nconsole.log(\"reading state after dispatch\", store.getState()); // payload can be any data type; object, array, string, etc\n// when you hook up react with redux and  make a fetch; calling dispatch and then passing in (fetch)data as a payload and using that to write to state in reducer\n// everytime you call dispatch, the reducer is called\n// type is used to determine what to do in reducer\n// payload is used to determine what new data needs to be used to change state\n// data is always action.payload => payloads are like sources of information\n\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 34\n  },\n  __self: this\n}), document.getElementById('root')); // If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();","map":{"version":3,"sources":["/Users/stan-0/Desktop/personal projects/traveler/src/index.js"],"names":["React","ReactDOM","App","createStore","serviceWorker","store","reducer","console","log","getState","newsCategory","name","dispatch","type","payload","render","document","getElementById","unregister"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,SAASC,WAAT,QAA4B,OAA5B;AACA,OAAO,KAAKC,aAAZ,MAA+B,iBAA/B,C,CAGA;AACA;;AACA,MAAMC,KAAK,GAAGF,WAAW,CAACG,OAAD,CAAzB;AAEAC,OAAO,CAACC,GAAR,CAAY,+BAAZ,EAA6CH,KAAK,CAACI,QAAN,EAA7C,E,CAEA;AACA;AACA;AACA;AACA;;AACA,MAAMC,YAAY,GAAG;AAACC,EAAAA,IAAI,EAAE;AAAP,CAArB;AACAN,KAAK,CAACO,QAAN,CAAe;AAACC,EAAAA,IAAI,EAAE;AAAP,CAAf;AACAR,KAAK,CAACO,QAAN,CAAe;AAACC,EAAAA,IAAI,EAAE,cAAP;AAAuBC,EAAAA,OAAO,EAAEJ;AAAhC,CAAf;AACAL,KAAK,CAACO,QAAN,CAAe;AAACC,EAAAA,IAAI,EAAE,eAAP;AAAwBC,EAAAA,OAAO,EAAE;AAAjC,CAAf;AACAP,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAA4CH,KAAK,CAACI,QAAN,EAA5C,E,CAEA;AACA;AACA;AACA;AACA;AACA;;AAGAR,QAAQ,CAACc,MAAT,CAAgB,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAhB,EAAyBC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAzB,E,CAEA;AACA;AACA;;AACAb,aAAa,CAACc,UAAd","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { createStore } from 'redux'\nimport * as serviceWorker from './serviceWorker';\n\n\n// store is used to manage state\n// contains state as an object and functions that manipulate/read state\nconst store = createStore(reducer)\n\nconsole.log(\"reading state before dispatch\", store.getState())\n\n// dispatch is the functions used to write to the state, \n// dipatch takes objects as arguments called \"action\"\n// the action must have at least a property called \"type\"\n// calling dispatch tells redux to call your reducer, this will initate your reducer\n// the type here is exactly the same as what is passed in action on line 18\nconst newsCategory = {name: \"Tech\"}\nstore.dispatch({type: \"CHANGE_LOADING\"}) \nstore.dispatch({type: \"ADD_CATEGORY\", payload: newsCategory})\nstore.dispatch({type: \"CHANGE_FILTER\", payload: \"hello\" })\nconsole.log(\"reading state after dispatch\", store.getState())\n\n// payload can be any data type; object, array, string, etc\n// when you hook up react with redux and  make a fetch; calling dispatch and then passing in (fetch)data as a payload and using that to write to state in reducer\n// everytime you call dispatch, the reducer is called\n// type is used to determine what to do in reducer\n// payload is used to determine what new data needs to be used to change state\n// data is always action.payload => payloads are like sources of information\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"]},"metadata":{},"sourceType":"module"}