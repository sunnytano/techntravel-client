{"ast":null,"code":"var _jsxFileName = \"/Users/stan-0/Desktop/personal projects/traveler/frontend/src/App.js\";\nimport React from 'react';\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport './App.css';\nimport { connect } from 'react-redux'; // higher order component that will add functionality to ur component\n\nimport NewsContainer from './containers/NewsContainer';\nimport { fetchNews } from './actions/NewsAction.js';\nimport Nav from \"./containers/Nav.js\";\nimport userActions from './actions/user.js';\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loading: true\n    };\n  }\n\n  componentDidMount() {\n    this.props.fetchNews().then(() => {\n      this.setState({\n        loading: false\n      });\n    });\n  }\n\n  render() {\n    console.log(this.props.news);\n    return React.createElement(Router, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, React.createElement(Nav, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }), React.createElement(NewsContainer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    })));\n  }\n\n} // MSP IS READING TO STATE\n// MSP is how you will read from state; this will give you access to the entire redux state\n// and whatever you return in the MSP function will be added that components props\n// state will be the defaultState in reducer\n// this is how a component will gain access to data that is stored within the redux store\n// MSP must return an object\n// this obj will be appended to the props of the component\n\n\nfunction mapStateToProps(state) {\n  console.log(state);\n  return {\n    news: state.news // only return the state that you need for this paticular component that will be read as props\n\n  };\n} // MDP IS WRITING TO STATE\n// has access to dispactch so it can write to state\n// will return an object\n// obj will also be appended to props of the component\n\n\nconst mapDispatchToProps = dispatch => ({\n  fetchNews: () => dispatch(fetchNews())\n}); // connect is a higher order function; which is a function that returns a function\n// connect makes 2 calls; whatever connect returns is another function\n// then that returned function is invoked in turn with App as its argument\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["/Users/stan-0/Desktop/personal projects/traveler/frontend/src/App.js"],"names":["React","BrowserRouter","Router","connect","NewsContainer","fetchNews","Nav","userActions","App","Component","state","loading","componentDidMount","props","then","setState","render","console","log","news","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAa,IAAIC,MAA1B,QAAwC,kBAAxC;AACA,OAAO,WAAP;AACA,SAASC,OAAT,QAAwB,aAAxB,C,CAAsC;;AACtC,OAAOC,aAAP,MAA0B,4BAA1B;AACA,SAASC,SAAT,QAA0B,yBAA1B;AACA,OAAOC,GAAP,MAAgB,qBAAhB;AACA,OAAOC,WAAP,MAAwB,mBAAxB;;AAGA,MAAMC,GAAN,SAAkBR,KAAK,CAACS,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAEhCC,KAFgC,GAE1B;AACJC,MAAAA,OAAO,EAAE;AADL,KAF0B;AAAA;;AAMhCC,EAAAA,iBAAiB,GAAE;AACjB,SAAKC,KAAL,CAAWR,SAAX,GACCS,IADD,CACM,MAAI;AACR,WAAKC,QAAL,CAAc;AACZJ,QAAAA,OAAO,EAAE;AADG,OAAd;AAGD,KALD;AAMD;;AAEDK,EAAAA,MAAM,GAAE;AACNC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKL,KAAL,CAAWM,IAAvB;AACA,WACA,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF,CADA;AAQH;;AAzBiC,C,CA4BlC;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAASC,eAAT,CAAyBV,KAAzB,EAA+B;AAC7BO,EAAAA,OAAO,CAACC,GAAR,CAAYR,KAAZ;AACA,SAAO;AACLS,IAAAA,IAAI,EAAET,KAAK,CAACS,IADP,CACY;;AADZ,GAAP;AAGD,C,CAED;AACA;AACA;AACA;;;AACA,MAAME,kBAAkB,GAAIC,QAAD,KAAe;AACxCjB,EAAAA,SAAS,EAAE,MAAMiB,QAAQ,CAACjB,SAAS,EAAV;AADe,CAAf,CAA3B,C,CAIA;AACA;AACA;;;AACA,eAAeF,OAAO,CAACiB,eAAD,EAAkBC,kBAAlB,CAAP,CAA6Cb,GAA7C,CAAf","sourcesContent":["import React from 'react';\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport './App.css';\nimport { connect } from 'react-redux' // higher order component that will add functionality to ur component\nimport NewsContainer from './containers/NewsContainer';\nimport { fetchNews } from './actions/NewsAction.js'\nimport Nav from \"./containers/Nav.js\"\nimport userActions from './actions/user.js'\n\n\nclass App extends React.Component {\n\n  state={\n    loading: true\n  }\n\n  componentDidMount(){\n    this.props.fetchNews()\n    .then(()=>{\n      this.setState({\n        loading: false\n      })\n    })\n  }\n\n  render(){\n    console.log(this.props.news)\n    return (\n    <Router>\n      <div className=\"App\">\n        <Nav />\n        <NewsContainer />\n      </div>\n   </Router>\n  );\n}\n}\n\n// MSP IS READING TO STATE\n// MSP is how you will read from state; this will give you access to the entire redux state\n// and whatever you return in the MSP function will be added that components props\n// state will be the defaultState in reducer\n// this is how a component will gain access to data that is stored within the redux store\n// MSP must return an object\n// this obj will be appended to the props of the component\n\nfunction mapStateToProps(state){ \n  console.log(state)\n  return { \n    news: state.news // only return the state that you need for this paticular component that will be read as props\n  }\n}\n\n// MDP IS WRITING TO STATE\n// has access to dispactch so it can write to state\n// will return an object\n// obj will also be appended to props of the component\nconst mapDispatchToProps = (dispatch) => ({\n  fetchNews: () => dispatch(fetchNews())\n})\n\n// connect is a higher order function; which is a function that returns a function\n// connect makes 2 calls; whatever connect returns is another function\n// then that returned function is invoked in turn with App as its argument\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n"]},"metadata":{},"sourceType":"module"}